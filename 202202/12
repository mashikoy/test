 [2022/2/12]研修タスクまとめ
 
 ◆大枠
  1.wordpressの導入を行う。
  (LAMP環境のインストールは完了)
  2.buildした環境とディレクトリ構成やconfigファイルについて比較を行う。
 
 ◆前提
 xdebugやguzzleなど、wordpress導入においての必須条件でないものについては
 導入対象外とする。
 (varnishについては非機能要件として必須と解釈し、導入対象とする。)
 
 ◆wordpress導入手順
 1.以下のようにサイトを分離する。
　静的コンテンツ     (80ポート)       ：/var/www/html(非SSL)            ←※1
　wordpressコンテンツ(8080・443ポート)：/var/www/training.com(SSL)

 2.wordpressのインストールを行う。

 3.varnishを導入する。
  レスポンス改善の確認として、一度だけabコマンドにてテストを行う。　←※2

※1 以下の点で、ソースコンパイル時とディレクトリ構成が異なる。
 ソースビルド時      ：/usr/local/apache2/htdocs
 yumでインストール時 ：/var/www/html
 
※2 ソースビルド時はseigeを使用していた
   +今回は1サイトに対してのみテストを実施するためabコマンドにてテストを行う

◆実作業手順

＜httpd-vhosts.confを用意＞

[admin@localhost www]$ sudo find / -name "*httpd-vhosts.conf*"
/usr/share/doc/httpd24u-2.4.52/httpd-vhosts.conf

[admin@localhost conf.d]$ sudo cp /usr/share/doc/httpd24u-2.4.52/httpd-vhosts.conf /etc/httpd/conf.d

※conf.d以下の.confファイルはすべて読みこまれる。
[admin@localhost conf]$ less httpd.conf
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
IncludeOptional conf.d/*.conf


＜8080ポートの追加を行うため、confファイルにListenポートを追記。＞

[admin@localhost conf]$ sudo vim httpd.conf

＜修正前＞
Listen 80

＜修正後＞
Listen 80
Listen 8080


＜vhost.confの修正時にSSL設定も行うため、事前に証明書作成を行う。＞
[admin@localhost httpd]$ sudo mkdir .ssl && cd .ssl
[admin@localhost httpd]$ sudo vim san.txt
subjectAltName = DNS:training.com, IP:192.168.56.112

[admin@localhost .ssl]$ sudo openssl genrsa -out server.key 2048
[admin@localhost .ssl]$ sudo openssl req -new -key server.key -sha256 -out server.csr -subj "/C=JP/ST=Tokyo/L=Shibuyaku/O=Training Inc./OU=Training Section/CN=training.com"
[admin@localhost .ssl]$ sudo openssl x509 -req -days 365 -sha256 -in server.csr -signkey server.key -out server.crt -extfile san.txt


＜httpd-vhosts.confを修正＞

[admin@localhost conf]$ sudo vim httpd.conf

＜以下、丸々追記＞

<VirtualHost *:8080>
    RewriteEngine on
    RewriteCond %{HTTPS} off
    RewriteRule ^/(.*)$ https://training.com/$1 [R=301,L]
</VirtualHost>

<VirtualHost *:443>
    ServerAdmin webmaster@training.com
    DocumentRoot "/var/www/training.com"
    ServerName training.com
    ErrorLog "logs/training.com-error_log"
    CustomLog "logs/training.com-access_log" common

    #ssl setting
    SSLEngine on
    SSLProtocol +TLSv1.2
    SSLCertificateFile /etc/httpd/.ssl/server.crt
    SSLCertificateKeyFile /etc/httpd/.ssl/server.key

   <Directory "/var/www/training.com">
       Options Indexes FollowSymLinks
       AllowOverride All
       Require all granted

    #Basic Authentication config

       #AuthType Basic
       #AuthName "Basic Authentication"
       #AuthUserFile /usr/local/apache2/conf/.htpasswd
       #require valid-user

       <FilesMatch .php$>
          SetHandler application/x-httpd-php
       </FilesMatch>
   </Directory>
</VirtualHost>

＜構文チェック＞

[admin@localhost conf.d]$ httpd -t
Syntax OK


＜サービス再起動＞

[admin@localhost conf.d]$ sudo systemctl restart httpd
[admin@localhost conf.d]$ sudo systemctl status httpd
● httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; disabled; vendor preset: disabled)
   Active: active (running) since 土 2022-02-12 17:20:11 JST; 5s ago

＜phpファイルをすべてtraining.comに移動＞

[admin@localhost html]$ find . -name "*php" | xargs -I% sudo mv % ../training.com/

＜8080ポートの開放＞

[admin@localhost training.com]$ sudo firewall-cmd  --permanent --add-port=8080/tcp
success
[admin@localhost training.com]$ sudo firewall-cmd --reload
success

＜hostsファイルの書き換え　※ホスト側＞

#ビルド環境
#192.168.56.111 training.com

#yum環境
192.168.56.112 training.com

＜ブラウザアクセス実行＞

https://training.com/info.php

→pfpinfoの情報がみれることを確認。

＜ブラウザアクセス実行(リダイレクト確認)

http://192.168.56.112:8080/info.php

→https://training.com/info.phpにリダイレクトされることを確認

＜サーバのhostsも修正(Varnish導入時のために、、、)＞

[admin@localhost training.com]$ sudo vim /etc/hosts
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
192.168.56.112 training.com

[admin@localhost training.com]$ curl training.com
<html><body><h1>It works!</h1></body></html>

→名前解決できることを確認


＜wordpress設定ファイルを用意＞

[admin@localhost training.com]$ sudo cp wp-config-sample.php wp-config.php


＜wordpressの設定ファイル修正＞

[admin@localhost wordpress]$ sudo sed -i "s/'database_name_here'/'wordpress'/g" /var/www/training.com/wp-config.php

[admin@localhost wordpress]$ sudo sed -i "s/'username_here'/'wp-usr'/g" /var/www/training.com/wp-config.php

[admin@localhost wordpress]$ sudo sed -i "s/'password_here'/'xxxxxx'/g" /var/www/training.com/wp-config.php
 
[admin@localhost wordpress]$ sudo sed -i "s/'utf8'/'utf8mb4'/g" /var/www/training.com/wp-config.php
 
 　※データベースの照合順序はMySQLによって自動で割り当てられるためそのまま

→MySQLの設定

   ※認証用ユニークキーは以下サイトで生成されたものをvimでそのまま貼り付け
   　[](https://api.wordpress.org/secret-key/1.1/salt/)

   ※WordPress データベーステーブルの接頭辞はそのまま

 [カスタム値：vimで追加]
 define( 'WP_CACHE', true );
 
 ＜インストール実施＞
 
 ～ブラウザにて作業
 
 https://training.com/
 
 →500エラーに、、、
 
 ★原因：Mysqlのsocketファイルの場所が異なるため。
       ソースビルド時：/tmp/mysql.sock
       RPM使用時    ：/var/lib/mysql/mysql.sock
 
 ★経緯：今回はyumを使用してインストールを実施したが、
        その際にビルドしたconfigファイルをコピーしてyumでできたconfigファイルに貼付したため。
        phpもyumでインストールしたが、phpの設定を確認したら以下のようになっていた。
        
        [admin@localhost training.com]$ php -ini | grep sock
        MYSQL_SOCKET => /var/lib/mysql/mysql.sock
        
 ★対応：どちらかを合わせる対応にて行う。
  　　  yumでの環境構築においては/var/lib/mysql/mysql.sockの使用を想定されているため、
        その通りにmy.cnfを修正する。
  
 ＜インストール再実施＞
 
  https://training.com/
 →https://training.com/wp-admin/install.php
 (configを用意しているため、リダイレクトされる。)
 
 サイトのタイトル：training
 ユーザ名：adm
 パスワード：UPDiRJq%EfSSX)lQW0
 メールアドレス：webmaster@training.com
 
 →インストール完了
 
 ＜記事の投稿を実施＞
 
 ～ブラウザにて作業
 
 →記事投稿ができること、および記事にブラウザアクセスできることを確認。
 
 ＜Varnish導入前にabコマンドでテスト＞
★[2022/2/12]ベンチマーク結果を参照

 ＜Varnish導入＞
 ～前回導入時とほぼ同じ手順のため割愛(IPなどサーバ固有の情報のみ異なる)
 
 ＜Varnish導入後にabコマンドでテスト＞
★[2022/2/12]ベンチマーク結果を参照

→Varnish導入後にキャッシュできるようになっていることを確認。

＜Varnish設定：GETリクエストのみ許容するように設定変更＞
 ～前回導入時と同じ手順のため割愛


＜設定内容確認＞
[admin@localhost ~]$ sudo varnishadm

help
～～～コマンド一覧出力～～～

vcl.list
200
active          0 boot


vcl.show boot
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
     if(req.method != "GET") {
       return (pass);
     }
}

→設定されていることを確認

